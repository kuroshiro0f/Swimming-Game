#pragma once

#include "Nagatomo_Actor.h"

class Nagatomo_PlayerActor : public Nagatomo_Actor
{
public:

	//プレイヤーの状態
	typedef enum PLAYER_STATE_ENUM
	{
		STATE_IDLE,
		STATE_SWIM,

		STATE_NUM,
	}PLAYER_STATE_ENUM;

	//キーの状態
	typedef enum KEY_STATE_ENUM
	{
		STATE_KEY_IDLE  = 0,
		STATE_KEY_UP    = 1,
		STATE_KEY_DOWN  = 2,
		STATE_KEY_RIGHT = 3,
		STATE_KEY_LEFT  = 4,

		STATE_KEY_ENUM,
	}KEY_STATE_ENUM;

	//評価
	typedef enum Evaluation
	{
		NONE,
		BAD,
		NORMAL,
		GOOD
	}Evaluation;

	//コンストラクタ
	Nagatomo_PlayerActor();
	//デストラクタ
	~Nagatomo_PlayerActor();

	//アップデート関数
	void Update(float _deltaTime);
	//アクターのアップデート関数
	void UpdateActor(float _deltaTime) override;
	//スタート処理の関数
	void StartProcess(float _deltaTime);
	//アクターの描画関数
	void DrawActor();
	//アニメーション関数
	void PlayAnim(float _deltaTime);
	//アニメーションのアタッチ関数
	void attachAnim(int _animPlay);

	// スタミナゲージの描画
	void DrawSt(int _st, int _MaxSt, int _MinSt);
	// ゴールまでの距離の描画
	void DrawToGoal(int _dCount);

	//ランダムキー
	void RandomKey();

	//turnFlagのゲッター
	bool GetTurnFlag() { return turnFlag; };

	//inputSpaceFlagのゲッター
	bool GetInputSpaceFlag() { return inputSpaceFlag; };

	//inputArrowFlagのゲッター
	bool GetInputArrpwFlag() { return inputArrowFlag; };

	//リターンの評価するためのプレイヤーの座標を補完
	float mPosX;

	// ゴールまでの距離 //
	float dCount;				// どれだけ進んだか        
	int maxdCount;				// どこまで進めるのか
	int NowPos;					// プレイヤーの現在座標

	//スタミナ関連
	int st;						// スタミナ
	int MaxSt;					// スタミナ最大値
	int MinSt;					// スタミナ最小値
	int halfSt;					//スタミナ（50%）
	int quarterSt;				//スタミナ（25%）

	int startTime;				// ゲーム開始時間
	int tmpTime;				// 現在時間を一時保存
	int countUP;				// 経過時間

	int count;					// 次のシーンに行くまでのカウント    
	int countDown;

	float inputTime;			//入力時間
	float inputLimitTime;		//入力制限時間


	int randomKeyNumber;
	bool randomFlag;
	bool inputArrowFlag;				//矢印キー入力フラグ

private:
	int inputStartTime;
	int inputEndTime;

	float addStaminaSpeed;				//加算されるスタミナによるスピード

	VECTOR mPrevPosition;

	PLAYER_STATE_ENUM mNowPlayerState;	//プレイヤーの今の状態

	KEY_STATE_ENUM mNowKeyState;		//キーの今の状態
	KEY_STATE_ENUM mPrevKeyState;		//キーの1つ前の状態
	//KEY_STATE_ENUM mRandomKeyState;	//ランダムキーの状態

	Evaluation	   mEvlt;				//評価

	bool startFlag;
	bool turnFlag;						//ターンフラグ
	bool inputSpaceFlag;				//SPACE入力フラグ
	bool mCheckKeyFlag;					//長押し対策フラグ

};